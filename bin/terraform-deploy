#!/bin/bash
set -e

test "$ENGINE_ROOT"  || ENGINE_ROOT=$(realpath "$(dirname "$0")"/..)
test "$CONTENT_ROOT" || CONTENT_ROOT=$(realpath "$ENGINE_ROOT"/..)

ENGINE_ROOT=$(realpath "$ENGINE_ROOT")
CONTENT_ROOT=$(realpath "$CONTENT_ROOT")

required_missing=()

test "$INFRA_TARGET_NAME" || required_missing+=('INFRA_TARGET_NAME')

. "$ENGINE_ROOT"/lib/sh/validate-required.sh

export INFRA_TARGET_NAME

INFRA_ENV_ROOT=$CONTENT_ROOT/terraform/targets/$INFRA_TARGET_NAME

if [[ ! -e $INFRA_ENV_ROOT ]]; then
  printf 'terraform-deploy: warn: no target environment: %s; skipping release\n' "$INFRA_TARGET_NAME" >&2
  exit 0
fi

for endpoint in "$INFRA_ENV_ROOT"/*; do

  unset  INFRA_DEPLOYMENT_NAME
  export INFRA_DEPLOYMENT_NAME=$(basename "$endpoint")

  set +e
  "$ENGINE_ROOT"/drivers/terraform-changed
  rc=$?
  set -e

  case $rc in
    0)
      printf 'terraform-deploy: target=%s, deployment=%s: unchanged\n' "$INFRA_TARGET_NAME" "$INFRA_DEPLOYMENT_NAME"
      continue
    ;;
    1)
      printf 'terraform-deploy: target=%s, deployment=%s: converging\n' "$INFRA_TARGET_NAME" "$INFRA_DEPLOYMENT_NAME"
      "$ENGINE_ROOT/drivers/terraform-deliver"
    ;;
    *)
      printf 'fatal: terraform-deploy: target=%s, deployment=%s: terraform-desired exited with error\n' "$INFRA_TARGET_NAME" "$INFRA_DEPLOYMENT_NAME" >&2
      exit 1
    ;;
  esac

done
